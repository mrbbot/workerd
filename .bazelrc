common --enable_platform_specific_config

# Our dependencies (ICU, zlib, etc.) produce a lot of these warnings, so we disable them.
# TODO(cleanup): Can we disable warnings altogether from our dependencies, without disabling them
#   for workerd?
build --cxxopt='-Wno-ambiguous-reversed-operator' --host_cxxopt='-Wno-ambiguous-reversed-operator'

#
# Linux
#
build:linux --cxxopt='-std=c++20' --host_cxxopt='-std=c++20' --force_pic --verbose_failures
build:linux --cxxopt='-fcoroutines-ts' --host_cxxopt='-fcoroutines-ts'
build:linux --cxxopt='-stdlib=libc++' --host_cxxopt='-stdlib=libc++'
build:linux --linkopt='-stdlib=libc++' --host_linkopt='-stdlib=libc++'

build:linux --action_env=BAZEL_COMPILER=clang
build:linux --action_env=CC=clang
build:linux --action_env=CXX=clang++

# Warning options.
build:linux --cxxopt='-Wall' --host_cxxopt='-Wall'
build:linux --cxxopt='-Wextra' --host_cxxopt='-Wextra'
build:linux --cxxopt='-Wno-strict-aliasing' --host_cxxopt='-Wno-strict-aliasing'
build:linux --cxxopt='-Wno-sign-compare' --host_cxxopt='-Wno-sign-compare'
build:linux --cxxopt='-Wno-unused-parameter' --host_cxxopt='-Wno-unused-parameter'
build:linux --cxxopt='-Wno-missing-field-initializers' --host_cxxopt='-Wno-missing-field-initializers'
build:linux --cxxopt='-Wno-ignored-qualifiers' --host_cxxopt='-Wno-ignored-qualifiers'

build:linux --@capnp-cpp//src/kj:openssl=True --@capnp-cpp//src/kj:zlib=True --@capnp-cpp//src/kj:libdl=True

#
# macOS
#
build:macos --cxxopt='-std=c++20' --host_cxxopt='-std=c++20' --force_pic --verbose_failures
build:macos --cxxopt='-fcoroutines-ts' --host_cxxopt='-fcoroutines-ts'
build:macos --cxxopt='-stdlib=libc++' --host_cxxopt='-stdlib=libc++'
build:macos --linkopt='-stdlib=libc++' --host_linkopt='-stdlib=libc++'

build:macos --action_env=BAZEL_COMPILER=clang
build:macos --action_env=CC=clang
build:macos --action_env=CXX=clang++

# Warning options.
build:macos --cxxopt='-Wall' --host_cxxopt='-Wall'
build:macos --cxxopt='-Wextra' --host_cxxopt='-Wextra'
build:macos --cxxopt='-Wno-strict-aliasing' --host_cxxopt='-Wno-strict-aliasing'
build:macos --cxxopt='-Wno-sign-compare' --host_cxxopt='-Wno-sign-compare'
build:macos --cxxopt='-Wno-unused-parameter' --host_cxxopt='-Wno-unused-parameter'
build:macos --cxxopt='-Wno-missing-field-initializers' --host_cxxopt='-Wno-missing-field-initializers'
build:macos --cxxopt='-Wno-ignored-qualifiers' --host_cxxopt='-Wno-ignored-qualifiers'

build:macos --@capnp-cpp//src/kj:openssl=True --@capnp-cpp//src/kj:zlib=True --@capnp-cpp//src/kj:libdl=True

#
# Windows
#

# See https://bazel.build/configure/windows#symlink
startup --windows_enable_symlinks
build:windows --enable_runfiles
# We use LLVM's MSVC-compatible compiler driver to compile our code on Windows,
# as opposed to using MSVC directly. This enables us to use the "same" compiler
# frontend on Linux, macOS, and Windows, massivley reducing the effort required
# to compile workerd on Windows. Notably, this provides proper support for
# `#pragma once` when using symlinked virtual includes, `__atomic_*` functions,
# a standards-compliant preprocessor, support for GNU statement expressions
# used by some KJ macros, and understands the `.c++` extension by default.
build:windows --compiler=clang-cl

build:windows --cxxopt='/std:c++20' --host_cxxopt='/std:c++20' --verbose_failures
build:windows --cxxopt='/await' --host_cxxopt='/await'
build:windows --cxxopt='/wo4503' --host_cxxopt='/wo4503'
build:windows --cxxopt='/DWINDOWS_LEAN_AND_MEAN' --host_cxxopt='/DWINDOWS_LEAN_AND_MEAN'
# The `/std:c++14` argument is unused during boringssl compilation and we don't
# want a warning when compiling each file.
build:windows --cxxopt='-Wno-unused-command-line-argument' --host_cxxopt='-Wno-unused-command-line-argument'

build:windows --@capnp-cpp//src/kj:openssl=True --@capnp-cpp//src/kj:zlib=True

